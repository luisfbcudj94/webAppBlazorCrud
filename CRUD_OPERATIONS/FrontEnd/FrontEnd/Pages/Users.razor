@page "/"

@using BlazorBootstrap
@using FrontEnd.Application.DTOs
@using FrontEnd.Application.Interfaces
@using FrontEnd.Modals
@using CurrieTechnologies.Razor.SweetAlert2;

@inject IUsersService userSerive;
@inject SweetAlertService alert;

<nav class="navbar navbar-dark bg-primary">
    <a class="navbar-brand">CRUD OPERATIONS</a>
</nav>

<div class="title-table">

    <h1>Users</h1>

    <button class="btn btn-primary" @onclick="AddEmployee">
        <i class="fa-solid fa-plus"></i>
        Create new user
    </button>

</div>


@* <UserInformationModal ShowModal="@showModal" IsUpdate="@isUpdate" UserToUpdate="newUser" OnGetUsers="GetUsers"></UserInformationModal> *@

<UserInformationModal ShowModal="@showModal" IsUpdate="@isUpdate" UserToUpdate="newUser" OnGetUsers="GetUsersPaginated"></UserInformationModal>

<table class="table table-hover">
    <thead class="table-primary">
        <tr>
            <th >User Id</th>
            <th>Employee Id</th>
            <th>Email</th>
            <th>Designation</th>
            <th>Reporting Manager</th>
            <th>Joining Date</th>
            <th>Date Of Birth</th>
            <th>Display Name</th>
            <th>Role Id</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null)
        {
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.EmployeeId</td>
                    <td>@user.Email</td>
                    <td>@user.Designation</td>
                    <td>@user.ReportingManager</td>
                    <td>@user.JoiningDate</td>
                    <td>@user.DateOfBirth</td>
                    <td>@user.DisplayName</td>
                    <td>@user.RoleId</td>
                    <td class="actions-icons">
                        <i class="fa-solid fa-pen" @onclick="() => UpdateEmployee(user)"></i>
                        <i class="fa-solid fa-trash" @onclick="() => DeleteEmployee(user.UserId)"></i>
                    </td>
                </tr>
            }
        }
        else
        {
            <p>No users available.</p>
        }
    </tbody>
</table>

<div class="container-pagination">

    <div class="pagination">

        <button class="btn btn-outline-primary" disabled="@(!hasPrevious)" @onclick="() => ChangePage(pageNumber - 1)">
            <span aria-hidden="true">&laquo;</span>
        </button>

        @for (int i = 1; i <= Math.Min(pageCount, 4); i++)
        {
            int currentPage = i;

            <button class="btn @(currentPage == pageNumber ? "btn-outline-primary active" : "btn-outline-primary")" @onclick="() => ChangePage(currentPage)">
                @currentPage
            </button>

        }

        @if (pageCount > 5)
        {
            <button class="btn btn-outline-primary">
                ...
            </button>
            <button class="btn @(pageCount == pageNumber ? "btn-outline-primary active" : "btn-outline-primary")" @onclick="() => ChangePage(pageCount)">
                @pageCount
            </button>
        }

        <button class="btn btn-outline-primary" disabled="@(!hasNext)" @onclick="() => ChangePage(pageNumber + 1)">
            <span aria-hidden="true">&raquo;</span>
        </button>

    </div>

    <div class="dropup-center dropup">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            items per page
        </button>
        <ul class="dropdown-menu">
            <li><a class="dropdown-item" @onclick="() => SetPageSize(1)">1</a></li>
            <li><a class="dropdown-item" @onclick="() => SetPageSize(5)">5</a></li>
            <li><a class="dropdown-item" @onclick="() => SetPageSize(10)">10</a></li>
            <li><a class="dropdown-item" @onclick="() => SetPageSize(20)">20</a></li>
        </ul>
    </div>


</div>



@code {

    List<UserDTO>? users = null;
    [Parameter] public UserDTO? newUser { get; set; }

    private bool showModal = false;
    private bool isUpdate = false;

    private int pageNumber = 1;
    private int pageSize = 1;
    private int pageCount = 0;
    private bool hasPrevious = false;
    private bool hasNext = false;

    private int selectedPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await GetUsersPaginated();
    }

    private async Task SetPageSize(int size)
    {
        pageNumber = 1;
        pageSize = size;

        await GetUsersPaginated();
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= pageCount)
        {
            pageNumber = newPage;
            selectedPage = newPage;
            await GetUsersPaginated();
        }
    }

    private async Task GetUsersPaginated()
    {
        var userPaginated = await userSerive.GetAllPaginated(pageNumber, pageSize);

        users = userPaginated.Data;
        pageCount = userPaginated.PageCount;
        hasPrevious = userPaginated.HasPrevious;
        hasNext = userPaginated.HasNext;

        showModal = false;
    }

    private void UpdateEmployee(UserDTO user)
    {
        showModal = true;
        isUpdate = true;
        newUser = user;
    }

    private async Task DeleteEmployee(Guid userId)
    {
        var response = await userSerive.RemoveById(userId);

        if (response)
        {
            await alert.FireAsync(new SweetAlertOptions
                {
                    Title = "User deleted successfully.",
                    Text = $"The user has been successfully deleted",
                    Icon = SweetAlertIcon.Success,
                    ShowCancelButton = false
                });
        }
        else
        {
            await alert.FireAsync(new SweetAlertOptions
                {
                    Title = "There has been an error.",
                    Text = "An error has occurred. Please try again later.",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false
                });
        }

        await GetUsersPaginated();
    }

    private void HideModal()
    {
        showModal = false;
    }

    private void AddEmployee()
    {
        newUser = new UserDTO();
        newUser.DateOfBirth = DateTime.Today.AddYears(-30);
        newUser.JoiningDate = new DateTime(2015, 1, 1);

        showModal = true;
        isUpdate = false;
    }


}