@page "/employees"
@using CRUD_OPERATIONS.Components.Modals
@using CRUD_OPERATIONS.Components.Models
@using static CRUD_OPERATIONS.Components.Modals.AddEmployeeModal
@rendermode InteractiveServer

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

<button class="btn btn-primary" @onclick="ShowModal">Create new employee</button>

<AddEmployeeModal ShowModal="@showModal" OnAddEmployee="HandleAddEmployee" />

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>UserId</th>
                <th>EmployeeId</th>
                <th>Email</th>
                <th>Designation</th>
                <th>ReportingManager</th>
                <th>JoiningDate</th>
                <th>DateOfBirth</th>
                <th>DisplayName</th>
                <th>RoleId</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in employees)
            {
                <tr>
                    <td>@forecast.UserId</td>
                    <td>@forecast.EmployeeId</td>
                    <td>@forecast.Email</td>
                    <td>@forecast.Designation</td>
                    <td>@forecast.ReportingManager</td>
                    <td>@forecast.JoiningDate</td>
                    <td>@forecast.JoiningDate</td>
                    <td>@forecast.DateOfBirth</td>
                    <td>@forecast.DisplayName</td>
                    <td>@forecast.RoleId</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee>? employees;
    private int currentCount = 0;
    private bool showModal = false;
    [Parameter] public NewEmployeeDTO? newEmployee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        employees = new List<Employee>();
        employees.Add(new Employee
        {
            UserId = Guid.NewGuid(),
            EmployeeId = Guid.NewGuid(),
            Email = "email_test@gmail.com",
            Designation = "designation_test",
            ReportingManager = "reporting_manager_test",
            JoiningDate = DateOnly.MaxValue,
            DateOfBirth = DateOnly.MaxValue,
            DisplayName = "name_test",
            RoleId = Guid.NewGuid()
        });
    }

    private void HandleAddEmployee(NewEmployeeDTO data)
    {
        var employee = new Employee
            {
                UserId = Guid.NewGuid(),
                EmployeeId = Guid.NewGuid(),
                Email = data.Email,
                Designation = data.Designation,
                ReportingManager = data.ReportingManager,
                JoiningDate = data.JoiningDate,
                DateOfBirth = data.DateOfBirth,
                DisplayName = data.DisplayName,
                RoleId = Guid.NewGuid()
            };

        employees?.Add(employee);
        HideModal();
    }

    private void HideModal()
    {
        showModal = false;
    }

    private void ShowModal()
    {
        showModal = true;
    }
}
